temp_048

import sys
import cv2
import matplotlib.pyplot as plt
import numpy as np
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import Color_Filter
import CIE_XYZ_Curve
import CF_Cal


class Project(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.loaded_image = None
        self.histogram_image = None

    def initUI(self):
        self.setWindowTitle("MainWindow")
        self.ico = QImage('coder.png').scaled(100, 100)
        self.img = QImage('coder.png').scaled(0, 0)
        # 버튼
        btn = QPushButton("ImageChange", self)
        btn.resize(btn.sizeHint())
        btn.move(27, 120)
        btn.clicked.connect(self.openFileNameDialog)

        btn_histogram = QPushButton("Gray Histogram", self)
        btn_histogram.resize(btn_histogram.sizeHint())
        btn_histogram.move(150, 50)
        btn_histogram.clicked.connect(self.gray_histogram)

        btn_coordinate = QPushButton("Coordinate", self)
        btn_coordinate.resize(btn_coordinate.sizeHint())
        btn_coordinate.move(150, 120)
        btn_coordinate.clicked.connect(self.coordinate)
        # 출력 UI
        self.resize(1020, 640)
        self.center()
        self.show()

    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def paintEvent(self, event):
        painter = QPainter(self)
        self.drawImage(painter)

    def drawImage(self, painter):
        painter.drawImage(40, 20, self.ico)
        painter.drawImage(40, 180, self.img)

    def openFileNameDialog(self):
        fileName, _ = QFileDialog.getOpenFileName(
            self, '불러올 이미지를 선택하세요', " ", "All Files (*);;")
        if fileName:
            print(fileName)
            self.loaded_image = cv2.imread(fileName)
            # 불러온 이미지 원본
            self.img = QImage(fileName).scaledToWidth(250)

    # 흑백/히스토그램
    def gray_histogram(self):
        convertimg = self.loaded_image
        hist = cv2.calcHist([convertimg], [0], None, [256], [0, 256])
        cv2.normalize(hist, hist, 0, hist.shape[0], cv2.NORM_MINMAX)
        plt.plot(hist, color='black')
        plt.title('Gray Histogram')
        plt.xlabel('Bins')
        plt.ylabel('Frequency')
        plt.xlim([0, 256])
        plt.show()

    def coordinate(self):
        # hist_mean
        if hasattr(self, 'loaded_image'):
            coord_img = self.loaded_image
        else:
            print('none')
        # image = cv2.imread(coord_img, cv2.IMREAD_COLOR)
        image = coord_img
        b, g, r = cv2.split(image)
        inverse = cv2.merge((r, g, b))

        # 히스토그램 계산
        hist_r = cv2.calcHist([r], [0], None, [256], [0, 256])
        hist_g = cv2.calcHist([g], [0], None, [256], [0, 256])
        hist_b = cv2.calcHist([b], [0], None, [256], [0, 256])

        # 픽셀 값과 개수를 가중 평균하여 평균값 계산
        total_pixels_r = r.shape[0] * r.shape[1]  # 이미지의 전체 픽셀 수
        sum_value_r = 0
        total_pixels_g = g.shape[0] * g.shape[1]  # 이미지의 전체 픽셀 수
        sum_value_g = 0
        total_pixels_b = b.shape[0] * b.shape[1]  # 이미지의 전체 픽셀 수
        sum_value_b = 0

        for i in range(len(hist_r)):
            sum_value_r += i * hist_r[i]
        for j in range(len(hist_g)):
            sum_value_g += j * hist_g[j]
        for k in range(len(hist_b)):
            sum_value_b += k * hist_b[k]

        mean_value_r = sum_value_r / total_pixels_r
        print("R:", mean_value_r)
        mean_value_g = sum_value_g / total_pixels_g
        print("G:", mean_value_g)
        mean_value_b = sum_value_b / total_pixels_b
        print("B:", mean_value_b)

        # CF_Cal
        B = mean_value_b/255
        G = mean_value_g/255
        R = mean_value_r/255
        print(B, G, R)

        Color_Filter.Blue_CF_ndarray = np.array(Color_Filter.Blue_CF, float)
        Color_Filter.Green_CF_ndarray = np.array(Color_Filter.Green_CF, float)
        Color_Filter.Red_CF_ndarray = np.array(Color_Filter.Red_CF, float)
        All = B*Color_Filter.Blue_CF_ndarray + G * \
            Color_Filter.Green_CF_ndarray + R*Color_Filter.Red_CF_ndarray
        All_ndarray = np.array(All, float)

        # coordinate
        def SetWaveLengthGraph():
            major_xticks = list(range(400, 800+100, 100))
            minor_xticks = list(range(360-10, 830+10, 20))
            fig, ax = plt.subplots(figsize=(14, 7))
            ax.set_xticks(major_xticks)
            ax.set_xticks(minor_xticks, minor=True)
            ax.set_xlim([360-10, 830+10])

        CIE_XYZ_Curve.CIE_X_ndarray = np.array(CIE_XYZ_Curve.CIE_X, float)
        CIE_XYZ_Curve.CIE_Y_ndarray = np.array(CIE_XYZ_Curve.CIE_Y, float)
        CIE_XYZ_Curve.CIE_Z_ndarray = np.array(CIE_XYZ_Curve.CIE_Z, float)
        X = All_ndarray * CIE_XYZ_Curve.CIE_X_ndarray
        Y = All_ndarray * CIE_XYZ_Curve.CIE_Y_ndarray
        Z = All_ndarray * CIE_XYZ_Curve.CIE_Z_ndarray
        X_ndarray = np.array(X, float)
        Y_ndarray = np.array(Y, float)
        Z_ndarray = np.array(Z, float)

        X_cor = X_ndarray.sum()
        Y_cor = Y_ndarray.sum()
        Z_cor = Z_ndarray.sum()
        print(X_cor)
        print(Y_cor)
        print(Z_cor)

        x = X_cor/(X_cor + Y_cor + Z_cor)
        y = Y_cor/(X_cor + Y_cor + Z_cor)
        print('x = ', x)
        print('y = ', y)

        point_x = X_cor/(X_cor + Y_cor + Z_cor) * 1000
        point_y = 1000 - (Y_cor/(X_cor + Y_cor + Z_cor) * 1000)
        print(point_x)
        print(point_y)

        # merge
        image = cv2.imread('BG2.png')
        a = int(point_x)
        b = int(point_y)
        print(a, b)
        for i in range(0, 30):
            circle = cv2.circle(image, (a, b), 10, (0, 0, 255), 3)

        result = image
        plt.imshow(cv2.cvtColor(result, cv2.COLOR_BGR2RGB))
        plt.show()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    ex = Project()
    ex.show()
    sys.exit(app.exec_())

---------------------------------------------------------------

초안 완성